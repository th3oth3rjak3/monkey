package parser

import (
	"fmt"
	"monkey/interpreter/ast"
	"monkey/interpreter/lexer"
	"monkey/interpreter/token"
	"strconv"
)

type (
	prefixParseFn func() ast.Expression               // A function that is used to parse an expression with a prefix operator.
	infixParseFn  func(ast.Expression) ast.Expression // A function that is used to parse an expression with an infix operator.
)

const (
	_ int = iota
	LOWEST
	EQUALS      // ==
	LESSGREATER // < or >
	SUM         // +
	PRODUCT     // *
	PREFIX      // -x or !x
	CALL        // myFunction(x)
)

// Parser represents the monkey language parser to convert tokens into a runnable program.
type Parser struct {
	lex            *lexer.Lexer                      // The lexer that is used for generating tokens.
	errors         []string                          // The list of parse errors encountered.
	curToken       token.Token                       // The current token to be parsed.
	peekToken      token.Token                       // The next token to be parsed.
	prefixParseFns map[token.TokenType]prefixParseFn // The map of token types to a predetermined prefix parsing function.
	infixParseFns  map[token.TokenType]infixParseFn  // The map of token types to a predetermined infix parsing function.
}

// New creates a new Parser.
//
// Parameters:
//   - l: A lexer used to handle the source code lexing.
//
// Returns:
//   - *Parser: a new parser.
func New(l *lexer.Lexer) *Parser {
	p := &Parser{lex: l, errors: []string{}}

	// Read two tokens so curToken and peekToken are both set.
	p.nextToken()
	p.nextToken()

	p.prefixParseFns = make(map[token.TokenType]prefixParseFn)
	p.registerPrefixFn(token.IDENT, p.parseIdentifier)
	p.registerPrefixFn(token.INT, p.parseIntegerLiteral)

	return p
}

// registerPrefixFn adds an associated parsing function for a given prefix token type with the parser.
func (p *Parser) registerPrefixFn(tokenType token.TokenType, fn prefixParseFn) {
	p.prefixParseFns[tokenType] = fn
}

// registerInfixFn adds an associated parsing function for a given infix token type with the parser.
func (p *Parser) registerInfixFn(tokenType token.TokenType, fn infixParseFn) {
	p.infixParseFns[tokenType] = fn
}

// Errors returns any errors encountered during parsing.
//
// Returns:
//   - []string: The errors encountered during parsing.
func (p *Parser) Errors() []string {
	return p.errors
}

// peekError creates an error message and adds it to the parser's error list.
//
// Parameters:
//   - t: The expected token type.
func (p *Parser) peekError(t token.TokenType) {
	msg := fmt.Sprintf("expected next token to be %s, but got %s instead", t, p.peekToken.Type)
	p.errors = append(p.errors, msg)
}

// nextToken uses the lexer to get the next token and update its internal state.
func (p *Parser) nextToken() {
	p.curToken = p.peekToken
	p.peekToken = p.lex.NextToken()
}

// ParseProgram uses the parser to parse the source code.
//
// Returns:
//   - *ast.Program: The program code represented as an AST.
func (p *Parser) ParseProgram() *ast.Program {
	program := &ast.Program{}
	program.Statements = []ast.Statement{}

	for !p.curTokenIs(token.EOF) {
		stmt := p.parseStatement()
		if stmt != nil {
			program.Statements = append(program.Statements, stmt)
		}
		p.nextToken()
	}

	return program
}

// parseStatement parses a statement from the input source code.
//
// Returns:
//   - ast.Statement: a statement generated by parsing.
func (p *Parser) parseStatement() ast.Statement {
	switch p.curToken.Type {
	case token.LET:
		return p.parseLetStatement()
	case token.RETURN:
		return p.parseReturnStatement()
	default:
		return p.parseExpressionStatement()
	}
}

// parseLetStatement evaluates tokens and constructs a let statement from the input.
//
// Returns:
//   - *ast.LetStatement: a statement that represents a let binding.
func (p *Parser) parseLetStatement() *ast.LetStatement {
	stmt := &ast.LetStatement{Token: p.curToken}

	if !p.expectPeek(token.IDENT) {
		return nil
	}

	stmt.Name = &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}
	if !p.expectPeek(token.ASSIGN) {
		return nil
	}

	// TODO: we're skipping the epxressions until we
	// encounter a semicolon
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

// curTokenIs checks to see if the current token's type matches the expected input.
//
// Parameters:
//   - t: The token type that is expected.
//
// Returns:
//   - bool: true when the input matches the current token type, otherwise false.
func (p *Parser) curTokenIs(t token.TokenType) bool {
	return p.curToken.Type == t
}

// peekTokenIs checks to see if the peek token's type matches the expected input.
//
// Parameters:
//   - t: The token type that is expected.
//
// Returns:
//   - bool: true when the input matches the peek token type, otherwise false.
func (p *Parser) peekTokenIs(t token.TokenType) bool {
	return p.peekToken.Type == t
}

// expectPeek checks the peek token to see if it matches the expected type.
// If so, it advances the tokens on the parser state and returns true.
//
// Returns:
//   - bool: true when the peek token matches the expected input TokenType, otherwise false.
func (p *Parser) expectPeek(t token.TokenType) bool {
	if p.peekTokenIs(t) {
		p.nextToken()
		return true
	} else {
		p.peekError(t)
		return false
	}
}

// parseReturnStatement constructs a return statement at the current parser position.
//
// Returns:
//   - *ast.ReturnStatement: The return statement parsed from the current parser position.
func (p *Parser) parseReturnStatement() *ast.ReturnStatement {
	stmt := &ast.ReturnStatement{Token: p.curToken}
	p.nextToken()

	// TODO: we're skipping expressions for now until we get a semicolon
	for !p.curTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

// parseExpressionStatement constructs an Expression Statement at the current parser position.
//
// Returns:
//   - *ast.ExpressionStatement: The new expression statement.
func (p *Parser) parseExpressionStatement() *ast.ExpressionStatement {
	stmt := &ast.ExpressionStatement{Token: p.curToken}

	stmt.Expression = p.parseExpression(LOWEST)

	if p.peekTokenIs(token.SEMICOLON) {
		p.nextToken()
	}

	return stmt
}

func (p *Parser) parseExpression(precedence int) ast.Expression {
	prefix := p.prefixParseFns[p.curToken.Type]
	if prefix == nil {
		return nil
	}

	leftExp := prefix()

	return leftExp
}

// parseIdentifier parses the current token as an Identifier.
//
// Returns:
//   - ast.Expression: The expression parsed from the current token position.
func (p *Parser) parseIdentifier() ast.Expression {
	return &ast.Identifier{Token: p.curToken, Value: p.curToken.Literal}
}

func (p *Parser) parseIntegerLiteral() ast.Expression {
	lit := &ast.IntegerLiteral{Token: p.curToken}

	value, err := strconv.ParseInt(p.curToken.Literal, 0, 64)
	if err != nil {
		msg := fmt.Sprintf("could not parse %q as integer", p.curToken.Literal)
		p.errors = append(p.errors, msg)
	}

	lit.Value = value
	return lit
}
